1. bfs
2. dfs
3. https://leetcode.com/problems/rotting-oranges/description/ - maintain time in queue along with node
4. detect cycle using bfs in undirected graph  - maintain the current parent in queue along with node
5. detect cycle using dfs in undirected graph - maintain parent in recursive call
6. number of distinct island -  https://www.geeksforgeeks.org/problems/number-of-distinct-islands/1
7. bipartite graph - bfs
8. bipartite graph - dfs
9. detect cycle in directed graph - visited and path visited array - course schedule
10. https://leetcode.com/problems/course-schedule/description/ - based on above (9)
11. topological sort using dfs - use a stack , visisted and pathvisited
12 https://leetcode.com/problems/course-schedule-ii/description/ - based on above (11)
13. topological sort in bfs we use indegree and visited is not needed
14. alien dictonary - topological sort
15. shortest path is DAG -  path visited????????????????????
16 Dijkstra algo Elog(v) - tc - short path from a given node for every other node
        - works only with +edge weight , aslo works with weighted graph (directed or undirected)
17. Bellman ford algo
        so the same work as djikstra but also works for -ve edges








| **#** | **Problem**                       | **Category**                                     | **LeetCode Link**                                                        |
| ----- | --------------------------------- | ------------------------------------------------ | ------------------------------------------------------------------------ |
| 1     | Number of Islands                 | Connected Components (DFS/BFS)                   | [Link](https://leetcode.com/problems/number-of-islands/)                 |
| 2     | Clone Graph                       | Graph Traversal (DFS/BFS)                        | [Link](https://leetcode.com/problems/clone-graph/)                       |
| 3     | Course Schedule                   | Cycle Detection (Directed Graph)                 | [Link](https://leetcode.com/problems/course-schedule/)                   |
| 4     | Course Schedule II                | Topological Sort                                 | [Link](https://leetcode.com/problems/course-schedule-ii/)                |
| 5     | Pacific Atlantic Water Flow       | Multi-source BFS/DFS                             | [Link](https://leetcode.com/problems/pacific-atlantic-water-flow/)       |
| 6     | Rotten Oranges                    | Multi-source BFS                                 | [Link](https://leetcode.com/problems/rotting-oranges/)                   |
| 7     | Word Ladder                       | BFS (Shortest Path in Unweighted Graph)          | [Link](https://leetcode.com/problems/word-ladder/)                       |
| 8     | Word Ladder II                    | BFS + Backtracking                               | [Link](https://leetcode.com/problems/word-ladder-ii/)                    |
| 9     | Minimum Genetic Mutation          | BFS (Shortest Path)                              | [Link](https://leetcode.com/problems/minimum-genetic-mutation/)          |
| 10    | Shortest Path in Binary Matrix    | BFS (Grid Shortest Path)                         | [Link](https://leetcode.com/problems/shortest-path-in-binary-matrix/)    |
| 11    | Is Graph Bipartite?               | BFS/DFS + Coloring                               | [Link](https://leetcode.com/problems/is-graph-bipartite/)                |
| 12    | Critical Connections in a Network | Bridges (Tarjan’s Algorithm)                     | [Link](https://leetcode.com/problems/critical-connections-in-a-network/) |
| 13    | Reconstruct Itinerary             | Eulerian Path + Hierholzer’s Algorithm           | [Link](https://leetcode.com/problems/reconstruct-itinerary/)             |
| 14    | Evaluate Division                 | Graph + DFS/BFS with Weights                     | [Link](https://leetcode.com/problems/evaluate-division/)                 |
| 15    | Graph Valid Tree                  | Union-Find / DFS                                 | [Link](https://leetcode.com/problems/graph-valid-tree/)                  |
| 16    | Find Eventual Safe States         | Directed Graph + DFS (Cycle Detection)           | [Link](https://leetcode.com/problems/find-eventual-safe-states/)         |
| 17    | Redundant Connection              | Union-Find / DFS (Cycle Detection in Undirected) | [Link](https://leetcode.com/problems/redundant-connection/)              |
| 18    | Alien Dictionary (Premium)        | Topological Sort                                 | [Link](https://leetcode.com/problems/alien-dictionary/)                  |
| 19    | Network Delay Time                | Dijkstra’s Algorithm                             | [Link](https://leetcode.com/problems/network-delay-time/)                |
| 20    | Minimum Height Trees              | Graph Centers + BFS                              | [Link](https://leetcode.com/problems/minimum-height-trees/)              |



